# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DialogBADASSDialog
                                 A QGIS plugin
 Extention permettant l'accès à l'interface BADASS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-04-12
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Alexandre Humeau
        email                : alexandre.humeau1@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.core import *
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from PyQt5.QtWidgets import *
from PyQt5 import QtCore
from PyQt5.QtCore import *
from PyQt5 import QtGui
from PyQt5.QtGui import *
from .form4_ouverture_menu import DialogBADASSForm4OuvertureMenu
from .expression import *
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'form4_ouverture.ui'))

#Changer les paramtres d'entrées du constructeur avec les éléments envoyé à la fentre form3_ouverture
class DialogBADASSForm4Ouverture(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, conn, cur, ouverture_type, modifier, value, parent=None):
        """Constructor."""
        super(DialogBADASSForm4Ouverture, self).__init__(parent)
        #
        self.conn = conn
        self.cur = cur
        self.modifier = modifier
        self.value=value
        self.setupUi(self)
        #Si l'on modifie une ouverture, alors on charge dans les différents valeurs dans le formulaire
        self.layers = QgsProject.instance().mapLayersByName('t_tranchee')
        if self.modifier :
            self.modif_f()
            self.set_form()


        #Les éléments du tableau ne sont pas clairement définis
        #Le model choisie pour l'instant est le plus adapté à un QTableView
        self.model = QStandardItemModel(5, 3)
        self.tableView_archeo.setModel(self.model)
        #Les données sont bidons, elles permettent d'avoir un aperçu d'un tableau rempli
        for i in range(5):
                for j in range(3):
                    item = QStandardItem(str(i+j))
                    self.model.setItem(i,j,item)
        #Quelques méthodes utiles pour cacher les en-têtes et changer leur contenue
        #self.tableView_archeo.horizontalHeader().setVisible(False)
        #self.ui.tblContents.verticalHeader().setVisible(False)
        #self.model.setHorizontalHeaderLabels(['2','1','2'])

        #Ancien bouton retour, permet d'accèder à un menu qui permet d'accéder aux autres formulaires du niveau 3
        self.menu_bouton.clicked.connect(self.menu)
        #fenetre expression
        self.rechercher.clicked.connect(lambda: expression_dialog(self,iface))
        #boutton ok
        self.buttonBox.accepted.connect(self.ok_clicked)
        #Ecouteur d'evènement pour les object
        #Pour avoir les changement lors de l'edition en 'temps réel'
        self.numouvert.editingFinished.connect(lambda: self.edit('tr_num',self.numouvert))
        self.longouvert.valueChanged.connect(lambda: self.edit('tr_long',self.longouvert))
        self.prof_max_ouvert.valueChanged.connect(lambda: self.edit('tr_prof_max',self.prof_max_ouvert))
        self.largouvert.valueChanged.connect(lambda: self.edit('tr_larg',self.largouvert))
        self.prof_min_ouvert.valueChanged.connect(lambda: self.edit('tr_prof_min',self.prof_min_ouvert))
        self.plainTextEdit.textChanged.connect(lambda: self.edit('tr_note',self.plainTextEdit))#Commentaire


    def edit(self, name, object):
        if self.layers[0].isEditable() :
            print("ui")
            print('id : ', self.f.id())
            print("fid",self.f['tr_id'])
            #Pour les différents objets
            if isinstance(object, QLineEdit):
                self.f[name] = object.text()
            elif isinstance(object, QDoubleSpinBox):
                self.f[name] = object.value()
            elif isinstance(object, QPlainTextEdit):
                self.f[name] = object.toPlainText()
            self.layers[0].updateFeature(self.f)
        else:
            print("ono")


    def modif_f(self):
        expression= '"tr_id" = '+ str(self.value)
        request = QgsFeatureRequest().setFilterExpression(expression)
        for f in self.layers[0].getFeatures(request):
            self.f=f

    def new_f(self):
        if self.layers[0].isEditable() :
            self.f = QgsFeature()
            self.f.setAttributes([11, None, None, None, None, None, None, None])
            self.layers[0].addFeatures([self.f])
            print('esp')
            #
            self.f.setFields(self.layers[0].fields())

    def menu(self):
        self.fenetre4_ouverture_menu = DialogBADASSForm4OuvertureMenu()
        # show the dialog
        self.fenetre4_ouverture_menu.show()

    def set_form(self):
        print(self.value)
        print(type(self.value,))
        fid = self.f.id()
        print("fid",fid)
        print("fid",self.f['tr_id'])
        #Pour charger le formulaire
        #On commence par récuperer les données pas charger

        try:
            #Puis on place les valeurs dans les objets
            #
            if str(self.f['tr_num']) =='NULL':
                numouvert=''
            else:
                numouvert=(str(self.f['tr_num']))
            self.numouvert.setText(numouvert)
            #
            if str(self.f['tr_long']) =='NULL':
                longouvert=0.0
            else:
                longouvert=float(str(self.f['tr_long']))
            self.longouvert.setValue(longouvert)
            #
            if str(self.f['tr_prof_max']) =='NULL':
                prof_max_ouvert=0.0
            else:
                prof_max_ouvert=float(str(self.f['tr_prof_max']))
            self.prof_max_ouvert.setValue(prof_max_ouvert)
            #
            if str(self.f['tr_larg']) =='NULL':
                largouvert=0.0
            else:
                largouvert=float(str(self.f['tr_larg']))
            self.largouvert.setValue(largouvert)
            #
            if str(self.f['tr_prof_min']) =='NULL':
                prof_min_ouvert=0.0
            else:
                prof_min_ouvert=float(str(self.f['tr_prof_min']))
            self.prof_min_ouvert.setValue(prof_min_ouvert)
            #
            if str(self.f['tr_note']) =='NULL':
                plainTextEdit=''
            else:
                plainTextEdit=(str(self.f['tr_note']))
            self.plainTextEdit.setPlainText(plainTextEdit)#Commentaire


            """self.numouvert.setText(str(self.f['tr_num']))
            self.longouvert.setValue(float(str(self.f['tr_long'])))
            self.prof_max_ouvert.setValue(float(str(self.f['tr_prof_max'])))
            self.largouvert.setValue(float(str(self.f['tr_larg'])))
            self.prof_min_ouvert.setValue(float(str(self.f['tr_prof_min'])))
            self.plainTextEdit.setPlainText(str(self.f['tr_note']))#Commentaire"""
        except Exception as e:
            raise

    def ok_clicked(self):
        if not self.modifier:
            def new_f(self):



#qgsfieldcombobox
#
"""
layers = QgsProject.instance().mapLayersByName('t_tranchee')
if layers[0].isEditable() :
    f = QgsFeature()
    f.setAttributes([977, None, None, None, None, None, None, ':('])
    layers[0].addFeatures([f])
    f.setFields(layers[0].fields())
    print(f.id())
    f['tr_num'] = ':('
    layers[0].updateFeature(f)
    print("fid",f['tr_id'])

fid = 3
f.setId(fid)
with edit(layers[0]):
    f['tr_num'] = ':('
    layers[0].updateFeature(f)
    fid = f.id()
    fid = 99
feat1.setId(fid)
    print(fid)

if layers[0].isEditable() :
    f = QgsFeature()
    f.setAttributes([None, None, None, None, None, None, None, ':('])
    layers[0].addFeatures([f])
    f.setFields(layers[0].fields())
    f['tr_num'] = ':('
    layers[0].updateFeature(f)

    layers[0].changeAttributeValue('tr_num',':(')
    fid = f.id()
    print(fid)
    idx = layers[0].fields().indexFromName('tr_num')
    layers[0].changeAttributeValue(fid,idx,f['tr_num'])
fieldNameIndex
https://gis.stackexchange.com/questions/304355/keyerror-when-trying-to-set-attribute-in-qgis
layers[0].commitChanges()
layers[0].startEditing()"""
